# Task ID: 3
# Title: Design Core Game State Management
# Status: done
# Dependencies: 2
# Priority: high
# Description: Implement the game state system that tracks all aspects of a Kseri game
# Details:
Create GameState struct containing: player hands, table cards, deck, scores, current turn, collected cards for each player. Leverage the existing card structures from Task #2 (Card, Suit, Rank enums, Deck with shuffle/draw, Hand with capacity management, TablePile, and Score types in src/components/). Implement state transitions for dealing initial cards, player moves, collecting cards, and end game. Use Bevy's ECS system with components for game entities. Create systems for state validation and game flow control.

# Test Strategy:
Test state initialization matches Kseri rules (4 cards per player, 4 on table) using existing Hand and TablePile structures. Verify state transitions are valid. Test score calculation logic using the Score struct. Ensure game end conditions are properly detected when Deck is empty.

# Subtasks:
## 1. Design GameState Struct [done]
### Dependencies: None
### Description: Create the core GameState struct that will hold all game state data including current phase, turn information, and game conditions
### Details:
Define the GameState struct with fields for game phase (Setup/Playing/GameOver), current turn, references to existing components: two Hand instances for players, TablePile for board state, Deck for remaining cards, two Score instances for tracking. Use the structures from src/components/ as building blocks. Consider using Bevy's Resource trait for global access.

## 2. Implement Bevy ECS Components [done]
### Dependencies: 3.1
### Description: Create ECS components for all game entities including players, pieces, tiles, and game objects
### Details:
Design components following Bevy's composition pattern: Player component with ID and name, integrate existing Card component from src/components/, create CardOwner component to track who owns collected cards, Position component for table layout, and KseriMarker component for special Kseri collections. Ensure components work seamlessly with existing card structures.

## 3. Create State Transition Systems [done]
### Dependencies: 3.1, 3.2
### Description: Implement systems for handling transitions between different game states and phases
### Details:
Build state machine using Bevy's States API. Create transition handlers for Setup->Playing (using Deck::shuffle and deal methods), turn changes, card collection logic, and game ending when Deck is empty. Implement enter/exit handlers that properly update Hand, TablePile, and Score structures.

## 4. Implement Turn Management [done]
### Dependencies: 3.1, 3.3
### Description: Create turn-based game flow management including player turn tracking and action sequencing
### Details:
Develop TurnManager system that tracks current player, validates card plays from Hand to TablePile, implements Kseri collection rules, manages card drawing from Deck when hands are empty, and triggers turn end/start events. Integrate with existing Hand::play_card and TablePile methods.

## 5. Add State Validation Logic [done]
### Dependencies: 3.2, 3.4
### Description: Implement validation systems to ensure game state consistency and prevent invalid actions
### Details:
Create validation systems that check move legality using Hand capacity limits, verify Kseri collection rules with TablePile state, validate that played cards exist in player's Hand, ensure Deck has cards before drawing, and handle edge cases. Use existing method signatures from Card/Hand/Deck structs.

## 6. Integrate with Bevy Scheduling [done]
### Dependencies: 3.3, 3.4, 3.5
### Description: Configure systems with Bevy's scheduling system ensuring proper execution order and thread safety
### Details:
Set up system sets and ordering constraints using Bevy's app builder. Configure parallel execution where safe, establish clear data dependencies between Hand/Deck/TablePile mutations, and ensure Score updates happen after valid collections. Add appropriate system labels for card operations and state changes.

